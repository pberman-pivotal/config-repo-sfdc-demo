spring:
  profiles.active: local
server:
  port: 9000
security:
  basic:
    enabled: false

management:
  context-path: /manage
  security:
    enabled: false

endpoints:
  env:
    keys-to-sanitize: pwd,uid,password,secret,key,client_id,client_key # suffix or regex

logging:
  level:
    com.netflix: INFO
    org.springframework.cloud: INFO
    io.pivotal.sfdc: DEBUG

info:
  component: Auth Service
  build:
    name: ${project.name:authService}
    description: ${project.description}
    version: ${project.version}
    group: ${project.groupId}
    artifact: ${project.artifactId}

eureka:
  instance:
    #preferIpAddress: false
    statusPageUrlPath: ${management.context-path}/info
    healthCheckUrlPath: ${management.context-path}/health
    registryFetchIntervalSeconds: 5
    leaseRenewalIntervalInSeconds: 5
  client:
    registerWithEureka: true
    fetchRegistry: true

sfdc:
  client_id: 3MVG9uudbyLbNPZMlMnISbGthO3wzGGbnTf0tsHT9Mw0TYnXcPB5o3Ylui_NvjDjJqW8u63IHpfyu17V_Yign
  client_key: 8042128655298341477
  uid: pberman123@gmail.com
  pwd: JazzBlues40?JKFPIthlfGH9BAbVPHA7kunl

---
spring:
  profiles: local
  instance:
    nonSecurePort: ${server.port}
  redis:
    host: redis
    port: 6379
eureka:
  instance:
    preferIpAddress: true
    hostname: authservice
    nonSecurePort: ${server.port}
  client:
    serviceUrl:
      defaultZone: http://discovery:8761/eureka/

---
spring:
  profiles: cloud # For deployment in Cloud Foundry
  cloud:
    services:
      registrationMethod: route
eureka:
  instance:
    securePortEnabled: true
    nonSecurePortEnabled: false
    secureVirtualHostName: ${spring.application.name}
    metadataMap:
      instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${server.port}}}
